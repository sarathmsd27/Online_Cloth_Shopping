{"ast":null,"code":"import { Cart } from '../shared/model/cart';\nimport { BehaviorSubject } from 'rxjs';\nimport { CartItem } from '../shared/model/Cartitem';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = new Cart();\n    //subject behaviour rxjs concept\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  //Add to cart method\n  addToCart(product) {\n    let cartItem = this.cart.items.find(item => item.product.id === product.id);\n    if (cartItem) return;\n    this.cart.items.push(new CartItem(product));\n    this.setCartToLocalStorage();\n  }\n  //Remove cart item\n  removeFromCart(productId) {\n    this.cart.items = this.cart.items.filter(item => item.product.id != productId);\n    this.setCartToLocalStorage();\n  }\n  //change quantity\n  changeQuantity(productId, quantity) {\n    let cartItem = this.cart.items.find(item => item.product.id === productId);\n    if (!cartItem) return;\n    cartItem.quantity = quantity;\n    cartItem.price = quantity = cartItem.product.price;\n    this.setCartToLocalStorage();\n  }\n  //clear Cart\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n  //get cart obervables means check observable data\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  //now set localstorage data\n  setCartToLocalStorage() {\n    this.cart.totalPrice = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  //whenever set localstorage data then also get data\n  getCartFromLocalStorage() {\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson ? JSON.parse(cartJson) : new Cart();\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,eAAe,QAAoB,MAAM;AAElD,SAASC,QAAQ,QAAQ,0BAA0B;;AAOnD,OAAM,MAAOC,WAAW;EAMtBC;IALQ,SAAI,GAAQ,IAAIJ,IAAI,EAAE;IAE9B;IACQ,gBAAW,GAAyB,IAAIC,eAAe,CAAC,IAAI,CAACI,IAAI,CAAC;EAE1D;EAChB;EACAC,SAAS,CAACC,OAAe;IACvB,IAAIC,QAAQ,GAAE,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACJ,OAAO,CAACK,EAAE,KAAGL,OAAO,CAACK,EAAE,CAAC;IACtE,IAAGJ,QAAQ,EACX;IAEA,IAAI,CAACH,IAAI,CAACI,KAAK,CAACI,IAAI,CAAC,IAAIX,QAAQ,CAACK,OAAO,CAAC,CAAC;IAC5C,IAAI,CAACO,qBAAqB,EAAE;EAC7B;EACA;EACAC,cAAc,CAACC,SAAgB;IAC7B,IAAI,CAACX,IAAI,CAACI,KAAK,GAAC,IAAI,CAACJ,IAAI,CAACI,KAAK,CAACQ,MAAM,CAACN,IAAI,IAAEA,IAAI,CAACJ,OAAO,CAACK,EAAE,IAAII,SAAS,CAAC;IACzE,IAAI,CAACF,qBAAqB,EAAE;EAC/B;EAEA;EACCI,cAAc,CAACF,SAAgB,EAACG,QAAe;IAC9C,IAAIX,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACJ,OAAO,CAACK,EAAE,KAAGI,SAAS,CAAC;IACtE,IAAG,CAACR,QAAQ,EACZ;IAEAA,QAAQ,CAACW,QAAQ,GAAGA,QAAQ;IAC5BX,QAAQ,CAACY,KAAK,GAAGD,QAAQ,GAAGX,QAAQ,CAACD,OAAO,CAACa,KAAK;IACjD,IAAI,CAACN,qBAAqB,EAAE;EAC9B;EAEA;EACAO,SAAS;IACN,IAAI,CAAChB,IAAI,GAAG,IAAIL,IAAI,EAAE;IACrB,IAAI,CAACc,qBAAqB,EAAE;EAChC;EAEA;EACAQ,iBAAiB;IAChB,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACvC;EAEA;EACQV,qBAAqB;IAC5B,IAAI,CAACT,IAAI,CAACoB,UAAU,GAAC,IAAI,CAACpB,IAAI,CAACI,KAAK,CAACiB,MAAM,CAAC,CAACC,OAAO,EAAEC,WAAW,KACjED,OAAO,GAAGC,WAAW,CAACR,KAAK,EAAC,CAAC,CAAC;IAC9B,IAAI,CAACf,IAAI,CAACwB,UAAU,GAAC,IAAI,CAACxB,IAAI,CAACI,KAAK,CAACiB,MAAM,CAAC,CAACC,OAAO,EAACC,WAAW,KAChED,OAAO,GAACC,WAAW,CAACT,QAAQ,EAAC,CAAC,CAAC;IAE/B,MAAMW,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,IAAI,CAAC;IAC1C4B,YAAY,CAACC,OAAO,CAAC,MAAM,EAACJ,QAAQ,CAAC;IACrC,IAAI,CAACP,WAAW,CAACY,IAAI,CAAC,IAAI,CAAC9B,IAAI,CAAC;EACjC;EAEH;EACQ+B,uBAAuB;IAC7B,MAAMN,QAAQ,GAACG,YAAY,CAACI,OAAO,CAAC,MAAM,CAAC;IAC3C,OAAOP,QAAQ,GAACC,IAAI,CAACO,KAAK,CAACR,QAAQ,CAAC,GAAC,IAAI9B,IAAI,EAAE;EACjD;;AA5DaG,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["Cart","BehaviorSubject","CartItem","CartService","constructor","cart","addToCart","product","cartItem","items","find","item","id","push","setCartToLocalStorage","removeFromCart","productId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","cartSubject","asObservable","totalPrice","reduce","prevSum","currentItem","totalCount","cartJson","JSON","stringify","localStorage","setItem","next","getCartFromLocalStorage","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sarath\\Desktop\\OnlineApp\\ShoppieCorner\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cart } from '../shared/model/cart';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Fashion } from '../shared/model/Fashion';\nimport { CartItem } from '../shared/model/Cartitem';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart:Cart = new Cart();\n\n  //subject behaviour rxjs concept\n  private cartSubject:BehaviorSubject<Cart> = new BehaviorSubject(this.cart)\n  \n  constructor() { } \n  //Add to cart method\n  addToCart(product:Fashion):void{\n    let cartItem= this.cart.items.find(item=>item.product.id===product.id)\n    if(cartItem)\n    return;\n   \n    this.cart.items.push(new CartItem(product))\n   this.setCartToLocalStorage();\n  }\n  //Remove cart item\n  removeFromCart(productId:string):void{\n    this.cart.items=this.cart.items.filter(item=>item.product.id != productId)\n     this.setCartToLocalStorage();\n  }\n\n  //change quantity\n   changeQuantity(productId:string,quantity:number){\n    let cartItem = this.cart.items.find(item=>item.product.id===productId)\n    if(!cartItem)\n    return;\n\n    cartItem.quantity = quantity;\n    cartItem.price = quantity = cartItem.product.price;\n     this.setCartToLocalStorage();\n   }\n\n   //clear Cart\n   clearCart(){\n      this.cart = new Cart();\n       this.setCartToLocalStorage();\n   }\n   \n   //get cart obervables means check observable data\n   getCartObservable():Observable<Cart>{\n    return this.cartSubject.asObservable();\n   }\n   \n   //now set localstorage data\n   private setCartToLocalStorage():void{\n    this.cart.totalPrice=this.cart.items.reduce((prevSum, currentItem)=>\n    prevSum + currentItem.price,0);\n    this.cart.totalCount=this.cart.items.reduce((prevSum,currentItem)=>\n    prevSum+currentItem.quantity,0)\n\n    const cartJson = JSON.stringify(this.cart)\n    localStorage.setItem('Cart',cartJson);\n    this.cartSubject.next(this.cart);\n   }\n\n//whenever set localstorage data then also get data\nprivate getCartFromLocalStorage():Cart{\n  const cartJson=localStorage.getItem('Cart');\n  return cartJson?JSON.parse(cartJson):new Cart();\n}\n\n}\n "]},"metadata":{},"sourceType":"module","externalDependencies":[]}