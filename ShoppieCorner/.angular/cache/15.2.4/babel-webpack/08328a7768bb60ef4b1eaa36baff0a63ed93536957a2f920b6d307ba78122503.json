{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { User } from '../shared/model/User';\nimport { USER_LOGIN_URL } from '../shared/constants/url';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nconst USER_KEY = 'User';\nexport class UserService {\n  constructor(http, toastrService) {\n    this.http = http;\n    this.toastrService = toastrService;\n    this.userSubject = new BehaviorSubject(this.getUserFromLocalStorage());\n    this.userObservable = this.userSubject.asObservable();\n  }\n  login(userLogin) {\n    return this.http.post(USER_LOGIN_URL, userLogin).pipe(tap({\n      next: user => {\n        this.setUserToLocalStorage(user);\n        this.toastrService.success(`Welcome to ShoppieCorner ${user.name}!`, 'Login Successfull !');\n      },\n      error: errorResponse => {\n        this.toastrService.error(errorResponse.console.error, 'Login Failed');\n      }\n    }));\n  }\n  logout() {\n    this.userSubject.next(new User());\n    localStorage.removeItem(USER_KEY);\n  }\n  setUserToLocalStorage(user) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n  getUserFromLocalStorage() {\n    const userJson = localStorage.getItem(USER_KEY);\n    if (userJson) return JSON.parse(userJson);\n    return new User();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AACvD,SAASC,IAAI,QAAQ,sBAAsB;AAG3C,SAASC,cAAc,QAAQ,yBAAyB;;;;AAIxD,MAAMC,QAAQ,GAAG,MAAM;AAIvB,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAe,EAASC,aAA2B;IAAnD,SAAI,GAAJD,IAAI;IAAoB,kBAAa,GAAbC,aAAa;IAFjD,gBAAW,GAAG,IAAIR,eAAe,CAAO,IAAI,CAACS,uBAAuB,EAAE,CAAC;IAG7E,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACtD;EAEAC,KAAK,CAACC,SAAoB;IACxB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAOZ,cAAc,EAAEW,SAAS,CAAC,CAACE,IAAI,CAACf,GAAG,CAAC;MAC9DgB,IAAI,EAAGC,IAAI,IAAI;QACd,IAAI,CAACC,qBAAqB,CAACD,IAAI,CAAC;QAC/B,IAAI,CAACV,aAAa,CAACY,OAAO,CAAC,4BAA4BF,IAAI,CAACG,IAAI,GAAG,EACjE,qBAAqB,CAAC;MAC1B,CAAC;MACDC,KAAK,EAAGC,aAAa,IAAI;QACvB,IAAI,CAACf,aAAa,CAACc,KAAK,CAACC,aAAa,CAACC,OAAO,CAACF,KAAK,EAAE,cAAc,CAAC;MAEvE;KACD,CAAC,CAAC;EACL;EACAG,MAAM;IACL,IAAI,CAACd,WAAW,CAACM,IAAI,CAAC,IAAIf,IAAI,EAAE,CAAC;IACjCwB,YAAY,CAACC,UAAU,CAACvB,QAAQ,CAAC;EAElC;EACSe,qBAAqB,CAACD,IAAS;IACrCQ,YAAY,CAACE,OAAO,CAACxB,QAAQ,EAACyB,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;EACrD;EACQT,uBAAuB;IAC7B,MAAMsB,QAAQ,GAAGL,YAAY,CAACM,OAAO,CAAC5B,QAAQ,CAAC;IAC/C,IAAG2B,QAAQ,EACX,OAAOF,IAAI,CAACI,KAAK,CAACF,QAAQ,CAAS;IACnC,OAAO,IAAI7B,IAAI,EAAE;EACnB;;AAlCSG,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["BehaviorSubject","tap","User","USER_LOGIN_URL","USER_KEY","UserService","constructor","http","toastrService","getUserFromLocalStorage","userObservable","userSubject","asObservable","login","userLogin","post","pipe","next","user","setUserToLocalStorage","success","name","error","errorResponse","console","logout","localStorage","removeItem","setItem","JSON","stringify","userJson","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sarath\\Desktop\\OnlineApp\\ShoppieCorner\\src\\app\\services\\user.service.ts"],"sourcesContent":[" import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { User } from '../shared/model/User';\nimport { IUserLogin } from '../shared/interfaces/IUserLogin';\nimport { HttpClient } from '@angular/common/http';\nimport { USER_LOGIN_URL } from '../shared/constants/url';\nimport { ToastrService } from 'ngx-toastr';\n\n\nconst USER_KEY = 'User'\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  \n  private userSubject = new BehaviorSubject<User>(this.getUserFromLocalStorage());\n  public userObservable:Observable<User>\n  constructor(private http:HttpClient,private toastrService:ToastrService) {\n    this.userObservable = this.userSubject.asObservable();\n   }\n\n   login(userLogin:IUserLogin):Observable<User>{\n     return this.http.post<User>(USER_LOGIN_URL, userLogin).pipe(tap({\n       next: (user) => {\n        this.setUserToLocalStorage(user)\n         this.toastrService.success(`Welcome to ShoppieCorner ${user.name}!`,\n           'Login Successfull !');\n       },\n       error: (errorResponse) => {\n         this.toastrService.error(errorResponse.console.error, 'Login Failed');\n\n       }\n     }));\n   }\n   logout(){\n    this.userSubject.next(new User());\n    localStorage.removeItem(USER_KEY);\n    \n   }\n    private setUserToLocalStorage(user:User){\n      localStorage.setItem(USER_KEY,JSON.stringify(user));\n    }\n    private getUserFromLocalStorage():User{\n      const userJson = localStorage.getItem(USER_KEY);\n      if(userJson)\n      return JSON.parse(userJson) as User;\n      return new User();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}