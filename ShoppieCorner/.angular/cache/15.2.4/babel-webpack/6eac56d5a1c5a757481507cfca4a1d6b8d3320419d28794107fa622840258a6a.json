{"ast":null,"code":"import { PRODUCTS_BY_ID_URL, PRODUCTS_BY_SEARCH_URL, PRODUCTS_BY_TAG_URL, PRODUCTS_TAGS_URL, PRODUCTS_URL } from '../shared/constants/url';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FashionsService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAll() {\n    // return sample_products\n    return this.httpClient.get(PRODUCTS_URL);\n  }\n  // search product\n  getAllProductBySearchTerm(searchTerm) {\n    //instead of below line we use\n    // return this.getAll().filter(product=>product.name.toLowerCase().includes(searchTerm.toLowerCase()))\n    return this.httpClient.get(PRODUCTS_BY_SEARCH_URL + searchTerm);\n  }\n  //Get all Tag\n  getAllTags() {\n    //instead of below line we use\n    // return sample_tags\n    return this.httpClient.get(PRODUCTS_TAGS_URL);\n  }\n  //Get Product by Tags\n  getAllProductByTag(tag) {\n    //instead of below line we use\n    // return tag === \"All\"? this.getAll():this.getAll().filter(product=>product.tag?.includes(tag))\n    return tag === \"All\" ? this.getAll() : this.httpClient.get(PRODUCTS_BY_TAG_URL + tag);\n  }\n  //get prodcut by id\n  getProductById(fashionId) {\n    //  return this.getAll().find(product=>product.id===fashionId)?? new Fashion()\n    return this.httpClient.get(PRODUCTS_BY_ID_URL + fashionId);\n  }\n}\nFashionsService.ɵfac = function FashionsService_Factory(t) {\n  return new (t || FashionsService)(i0.ɵɵinject(i1.HttpClient));\n};\nFashionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FashionsService,\n  factory: FashionsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,kBAAkB,EAAEC,sBAAsB,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,YAAY,QAAQ,yBAAyB;;;AAK1I,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;EAAe;EAC7CC,MAAM;IACJ;IACA,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAYL,YAAY,CAAC;EACrD;EACD;EACDM,yBAAyB,CAACC,UAAiB;IAC3C;IACA;IACA,OAAO,IAAI,CAACJ,UAAU,CAACE,GAAG,CAAYR,sBAAsB,GAAEU,UAAU,CAAC;EACzE;EACA;EACCC,UAAU;IACX;IACA;IACA,OAAO,IAAI,CAACL,UAAU,CAACE,GAAG,CAAQN,iBAAiB,CAAC;EACnD;EACD;EACAU,kBAAkB,CAACC,GAAU;IAC7B;IACA;IACA,OAAOA,GAAG,KAAK,KAAK,GAAE,IAAI,CAACN,MAAM,EAAE,GAAC,IAAI,CAACD,UAAU,CAACE,GAAG,CAAYP,mBAAmB,GAAEY,GAAG,CAAC;EAC5F;EACA;EACAC,cAAc,CAACC,SAAgB;IAC/B;IACA,OAAO,IAAI,CAACT,UAAU,CAACE,GAAG,CAAUT,kBAAkB,GAAEgB,SAAS,CAAC;EAClE;;AA7BaX,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;EAAAa,YAFd;AAAM","names":["PRODUCTS_BY_ID_URL","PRODUCTS_BY_SEARCH_URL","PRODUCTS_BY_TAG_URL","PRODUCTS_TAGS_URL","PRODUCTS_URL","FashionsService","constructor","httpClient","getAll","get","getAllProductBySearchTerm","searchTerm","getAllTags","getAllProductByTag","tag","getProductById","fashionId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sarath\\Desktop\\OnlineApp\\ShoppieCorner\\src\\app\\services\\fashions.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Fashion } from '../shared/model/Fashion';\nimport { Tag } from '../shared/model/Tag';\nimport { HttpClient } from '@angular/common/http';\nimport { PRODUCTS_BY_ID_URL, PRODUCTS_BY_SEARCH_URL, PRODUCTS_BY_TAG_URL, PRODUCTS_TAGS_URL, PRODUCTS_URL } from '../shared/constants/url';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class FashionsService {\n\n  constructor(private httpClient:HttpClient) { }\n  getAll():Observable<Fashion[]>{\n    // return sample_products\n    return this.httpClient.get<Fashion[]>(PRODUCTS_URL)\n  }\n // search product\ngetAllProductBySearchTerm(searchTerm:string){\n//instead of below line we use\n// return this.getAll().filter(product=>product.name.toLowerCase().includes(searchTerm.toLowerCase()))\nreturn this.httpClient.get<Fashion[]>(PRODUCTS_BY_SEARCH_URL +searchTerm)\n}\n//Get all Tag\n getAllTags():Observable<Tag[]>{\n//instead of below line we use\n// return sample_tags\nreturn this.httpClient.get<Tag[]>(PRODUCTS_TAGS_URL);\n }\n//Get Product by Tags\ngetAllProductByTag(tag:string):Observable<Fashion[]>{\n//instead of below line we use\n// return tag === \"All\"? this.getAll():this.getAll().filter(product=>product.tag?.includes(tag))\nreturn tag === \"All\"? this.getAll():this.httpClient.get<Fashion[]>(PRODUCTS_BY_TAG_URL +tag)\n}\n//get prodcut by id\ngetProductById(fashionId:string):Observable<Fashion>{\n//  return this.getAll().find(product=>product.id===fashionId)?? new Fashion()\nreturn this.httpClient.get<Fashion>(PRODUCTS_BY_ID_URL +fashionId)\n}  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}